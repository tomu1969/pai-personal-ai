version: '3.8'

services:
  # AI PBX Backend Application
  ai-pbx-backend:
    build:
      context: ../../
      dockerfile: docker/full-stack/Dockerfile.backend
    container_name: ai_pbx_backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ../../src:/app/src
      - ../../prompts:/app/prompts
      - ../../logs:/app/logs
      - /app/node_modules  # Anonymous volume for node_modules
    environment:
      # Node.js Environment
      - NODE_ENV=production
      - PORT=3000
      
      # Database Configuration
      - DATABASE_URL=postgresql://ai_pbx:aipbx123@postgres:5432/ai_pbx_db
      
      # Evolution API Configuration
      - EVOLUTION_API_URL=http://evolution-api:8080
      - EVOLUTION_API_KEY=pai_evolution_api_key_2025
      - EVOLUTION_INSTANCE_ID=aipbx
      - EVOLUTION_PAI_ASSISTANT_INSTANCE_ID=pai-assistant
      - WEBHOOK_URL=http://ai-pbx-backend:3000/webhook
      - EVOLUTION_PAI_ASSISTANT_WEBHOOK_URL=http://ai-pbx-backend:3000/webhook/pai-assistant
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4o-mini
      
      # Server Configuration
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      
    networks:
      - pai_network
    depends_on:
      postgres:
        condition: service_healthy
      evolution-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    command: ["npm", "start"]

  # AI PBX Frontend Application
  ai-pbx-frontend:
    build:
      context: ../../
      dockerfile: docker/full-stack/Dockerfile.frontend
    container_name: ai_pbx_frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ../../client:/app
      - /app/node_modules  # Anonymous volume for node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:3000/api
      - VITE_SOCKET_URL=http://localhost:3000
    networks:
      - pai_network
    depends_on:
      - ai-pbx-backend
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Evolution API v2.0.9 - WhatsApp Integration Platform
  evolution-api:
    image: atendai/evolution-api:v2.0.9
    container_name: evolution_api
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    environment:
      # Server Configuration
      - SERVER_URL=http://localhost:8080
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,POST,PUT,DELETE
      - CORS_CREDENTIALS=true
      
      # Database Configuration
      - DATABASE_ENABLED=true
      - DATABASE_CONNECTION_URI=postgresql://evolution:evolution123@postgres:5432/evolution_db
      - DATABASE_CONNECTION_CLIENT_NAME=EvolutionAPI
      
      # Redis Configuration
      - REDIS_ENABLED=true
      - REDIS_URI=redis://redis:6379
      - REDIS_PREFIX_KEY=evo_api
      
      # Authentication
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=pai_evolution_api_key_2025
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      
      # Webhook Configuration
      - WEBHOOK_GLOBAL_URL=http://ai-pbx-backend:3000/webhook
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      
      # Instance Settings
      - CONFIG_SESSION_PHONE_CLIENT=PAI System
      - CONFIG_SESSION_PHONE_NAME=AI PBX
      
      # QR Code Settings
      - QRCODE_LIMIT=30
      
      # Logs
      - LOG_LEVEL=ERROR
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      
    networks:
      - pai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres_pai
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: evolution_db
      POSTGRES_USER: evolution
      POSTGRES_PASSWORD: evolution123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - pai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evolution"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: redis_pai
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - pai_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: nginx_pai
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - pai_network
    depends_on:
      - ai-pbx-backend
      - ai-pbx-frontend
    profiles:
      - nginx  # Only start with --profile nginx

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_pai
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pai.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_DISABLE_POSTFIX: true
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - pai_network
    depends_on:
      - postgres
    profiles:
      - tools  # Only start with --profile tools

# Volumes for persistent data
volumes:
  evolution_instances:
    driver: local
    name: pai_evolution_instances
  evolution_store:
    driver: local
    name: pai_evolution_store
  postgres_data:
    driver: local
    name: pai_postgres_data
  redis_data:
    driver: local
    name: pai_redis_data
  pgadmin_data:
    driver: local
    name: pai_pgadmin_data

# Network for service communication
networks:
  pai_network:
    driver: bridge
    name: pai_network